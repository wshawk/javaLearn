<?xml version="1.0" encoding="UTF-8" ?>
<!-- 引入spirng boot默认的logback配置文件 -->
<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 动态日志级别 -->
    <jmxConfigurator/>

    <!-- 定义常量，类似与key-value的形式，log.home_dir作为日志文件的输出路径，之后用${log.home_dir}取出-->
    <property name="log.home_dir" value="E:/Code/commitToGitHub/javaLearn/example/springboot-demo/springboot-logback/src/main/resources"/>
    <!-- 定义日志文件的输出文件名-->
    <property name="log.app_name" value="logback"/>
    <!-- 定义常量log.maxHistory，日志最大的历史 30天 -->
    <property name="log.maxHistory" value="30"/>
    <!-- 定义日志根级别，默认是DEBUG级别，我们也可以主动去定义，在下面会用到-->
    <property name="log.level" value="info"/>
    <!-- 定义日志文件最大的大小-->
    <property name="log.maxSize" value="5MB" />

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
<!--            <pattern>-->
<!--                &lt;!&ndash; 设置日志输出格式 &ndash;&gt;-->
<!--                %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] %logger - %msg%n-->
<!--            </pattern>-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志拆分记录到其他文件 RollingFileAppender -->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作,超过ERROR级别的日志输出到日志文件当中-->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作，没超过ERROR级别的日志进行拦截 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动， 即可以根据时间和文件大小进行拆分 -->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;日志输出位置 可相对、和绝对路径 &ndash;&gt;-->
<!--            <fileNamePattern>-->
<!--                &lt;!&ndash; 下面中的%d表示安装天进行拆分日志文件，%i表示当某一天中日志文件大小超过 MaxFileSize标签规定的大小，i的取值会从1，2，3.....n这样的进行命令差分后的文件&ndash;&gt;-->
<!--                ${log.home_dir}/error/%d{yyyy-MM-dd}/${log.app_name}-%i.log-->
<!--            </fileNamePattern>-->
<!--            &lt;!&ndash; 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,假设设置每个月滚动，且<maxHistory>是30天，-->
<!--            则只保存最近30天的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 &ndash;&gt;-->
<!--            <maxHistory>${log.maxHistory}</maxHistory>-->
<!--            &lt;!&ndash;按照文件大小进行拆分&ndash;&gt;-->
<!--            <MaxFileSize>${log.maxSize}</MaxFileSize>-->
<!--        </rollingPolicy>-->
        <encoder>
            <pattern>
                <!-- 设置日志输出格式 -->
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- INFO级别日志 appender -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${log.home_dir}/info/%d{yyyy-MM-dd}/${log.app_name}-%i.log</fileNamePattern>-->
<!--            <maxHistory>${log.maxHistory}</maxHistory>-->
<!--            <MaxFileSize>${log.maxSize}</MaxFileSize>-->
<!--        </rollingPolicy>-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>
        </encoder>
    </appender>


    <!-- DEBUG级别日志 appender -->
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${log.home_dir}/debug/%d{yyyy-MM-dd}/${log.app_name}-%i.log</fileNamePattern>-->
<!--            <maxHistory>${log.maxHistory}</maxHistory>-->
<!--            <MaxFileSize>${log.maxSize}</MaxFileSize>-->
<!--        </rollingPolicy>-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!--设置一个向上传递的appender,所有级别的日志都会输出-->
    <appender name="all" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.home_dir}/app/%d{yyyy-MM-dd}/${log.app_name}-%i.log</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
            <MaxFileSize>${log.maxSize}</MaxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- name:用来指定受此loger约束的某一个包或者具体的某一个类。
    level:用来设置打印级别（日志级别），大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
    addtivity:是否向上级loger传递打印信息。默认是true。 -->
    <!--org.springframework.web包下的类的日志输出-->
<!--    <logger name="org.springframework.web" additivity="false" level="INFO">-->
<!--        <appender-ref ref="INFO"/>-->
<!--    </logger>-->

    <!--  对某个包下的日志特殊处理  -->
    <!--com.zgd包下的类的日志输出-->
    <logger name="com.zgd" additivity="false" level="DEBUG" >
        <appender-ref ref="all" />
        <appender-ref ref="ERROR" />
        <!--打印控制台-->
        <appender-ref ref="CONSOLE" />
    </logger>

    <!-- 异步日志输出 -->
<!--    <appender name="async_ysw" class="ch.qos.logback.classic.AsyncAppender">-->
<!--        &lt;!&ndash; ref值与上面的appender标签的name相对应 &ndash;&gt;-->
<!--        <appender-ref ref="console_ysw" />-->
<!--    </appender>-->

    <!-- 默认设置的日志打印规则-->
    <root>
        <!-- 打印debug级别日志及以上级别日志 -->
        <level value="${log.level}"/>
        <!-- 控制台输出 -->
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="all" />
    </root>
</configuration>
